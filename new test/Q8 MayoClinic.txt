package pages;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;


public class Page {
    public Page(WebDriver driver){
    this.driver =driver;
    PageFactory.initElements(driver, this);
    }
    WebDriver driver;

    @FindBy(xpath = "//span[contains(@class,'cmp-tab__button-title')][contains(text(),'Giving to')]")
    private WebElement DropMayo;

    @FindBy(xpath = "//a[@id='button-d87139392b']//span[@role='text'][normalize-space()='Give Now']")
    private WebElement mayo2;

    public void setDropMayo(){
        DropMayo.click();
    }
    public void setMayo2(){
        mayo2.click();
    }
}
************************-------------------Page2-----------------**************************

package pages;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties; 
import utils.Base;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.Select;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;

public class Page2 
 {

    public WebDriver driver;

    public Page2(WebDriver driver) {
        this.driver = driver;
        PageFactory.initElements(driver, this);
    }
   
    // access to properties file
    Base b= new Base();

    Properties prop =b.Get_properties();

    //Gift Details
    @FindBy(xpath = "//label[@for='amt3']")
    private WebElement amount;

    //Designate my gift to...
    @FindBy(xpath="//select[@id='designation']")
    private WebElement select;   
    
    // Gift Options
    @FindBy(xpath="//label[@for='anonymous']")
    private WebElement label2;

    //title
    @FindBy(xpath="//*[@id='billingInfo']/div[1]/div[1]/select")
    private WebElement mr;

    //FirstName
    @FindBy(xpath="//input[@id='personalFirstName']")
    private WebElement fname;
    
    //LastName
    @FindBy(xpath="//input[@id='personalLastName']")
    private WebElement lname;
    
    //CountryName
    @FindBy(xpath="//select[@id='personalCountry']")
    private WebElement Countryname;
    
    //State
    @FindBy(xpath="//select[@id='personalState']")
    private WebElement state;
       
    //address
    @FindBy(xpath="//input[@id='personalAddress']")
    private WebElement address;

    //cityName
    @FindBy(xpath="//input[@id='personalCity']")
    private WebElement city;

    //personalZip
    @FindBy(xpath="//input[@id='personalZip']")
    private WebElement zipcode;
    
    //personalPhone
    @FindBy(xpath="//input[@id='personalPhone']")
    private WebElement phone;

    //Email
    @FindBy(xpath="//input[@id='personalEmail']")
    private WebElement Email;

    //submit
    @FindBy(xpath="//button[@id='adfSubmit']")
    private WebElement submit;

    //complete payment pop-up
    @FindBy(xpath = "//h1[@class='fade-in']")
    private WebElement popup;


   
    public void setamount() {
        amount.click();
    }

    public void setSelect() {
        Select s =new Select(select);
        String Medical_Education=prop.getProperty("Medical_Education");
        s.selectByVisibleText(Medical_Education);

    }
 public void setLabel2() {
    label2.click();
}

public void setMr() {
    Select s =new Select(mr);
    s.selectByValue("Mr.");    
}

public void setFname() {
    String Tester=prop.getProperty("Firstname");
    fname.sendKeys(Tester);
}

public void setLname() {
    String TesterLast=prop.getProperty("Lastname");

    lname.sendKeys(TesterLast);
}

public void setCountryname() {
    Select s =new Select(Countryname);
    String India=prop.getProperty("Country");

        s.selectByVisibleText(India);

}

public void setState() {
    Select s =new Select(state);
    String NA=prop.getProperty("State");

    s.selectByValue(NA);
}

public void setAddress() {
    String addres=prop.getProperty("addres");

    address.sendKeys(addres);
}

public void setCity() {
    String cityname=prop.getProperty("cityname");

    city.sendKeys(cityname);
}

public void setZipcode() {
    String pincode=prop.getProperty("pincode");

    zipcode.sendKeys(pincode);
}

public void setPhone() {
    String phonenumber=prop.getProperty("phonenumber");

    phone.sendKeys(phonenumber);
}

public void setEmail() {
    String email=prop.getProperty("email");

    Email.sendKeys(email);
}

public void setSubmit() {
    submit.click();
}

public String setPopup() {
   String pop= popup.getText();
   return pop;
}

}

************************-------------------Runner-----------------**************************

package runner;

import static utils.Base.log;

import java.net.MalformedURLException;

import org.openqa.selenium.WebDriver;
import org.testng.annotations.Test;

import pages.Page;
import pages.Page2;
import utils.Base;

public class Runner extends Base  {
  
  @Test

  public  void Testcase() throws MalformedURLException, InterruptedException {
    Get_properties();

    WebDriver driver=openBrowser();
		log.info("Browser Launched");

    Page p=new Page(driver);

    
    p.setDropMayo();
    Thread.sleep(3000);
    p.setMayo2();

    Page2 home= new Page2(driver);


    home.setamount();

    home.setSelect();
    System.out.println("success");

    home.setLabel2();

    System.out.println("Gift details");

    home.setMr();

    System.out.println("set title");

    home.setFname();

    System.out.println("First Name");

    home.setLname();
    System.out.println("l Name");


    home.setCountryname();
    System.out.println("country Name");

    home.setState();
    System.out.println(" state");

    home.setAddress();
    System.out.println("address");

    home.setCity();
    System.out.println("city");

    home.setZipcode();
    System.out.println("code");

    home.setPhone();
    System.out.println("phone");

    home.setEmail();
    home.setSubmit();
    System.out.println("the end");


    Thread.sleep(7000);
    // String pop=home.setPopup();

    // System.out.println(pop);
    
}
}
******************************-----------base---------**************************************

package utils;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.time.Duration;
import java.util.Properties;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.safari.SafariDriver;
import org.openqa.selenium.support.events.EventFiringDecorator;
import org.openqa.selenium.support.events.WebDriverListener;
import io.github.bonigarcia.wdm.WebDriverManager;

public class Base {
	public static WebDriver driver;
	public final static int IMPLICIT_WAIT_TIME = 10;
	public final static int PAGE_LOAD_TIME = 5;
	public static Properties prop;
	public static final Logger log = LogManager.getLogger(Base.class);

	public Base() {
		
	}
	
	public static Properties Get_properties(){
		try {
			File path = new File("/home/coder/project/workspace/Project/config/browser.properties");

			FileInputStream fis = new FileInputStream(path);

			prop = new Properties();

			prop.load(fis);

		}

		catch (Exception e)

		{

			System.out.println(e);

		}
		return prop; 
	}


	public static WebDriver openBrowser() throws MalformedURLException {
		String browsername=prop.getProperty("browsername");
		if (browsername.equalsIgnoreCase("chrome")) {
			DesiredCapabilities dc = new DesiredCapabilities();
			dc.setBrowserName("chrome");
			driver = new RemoteWebDriver(new URL("http://localhost:4444"), dc);

		} else if (browsername.equalsIgnoreCase("firefox")) {
			WebDriverManager.firefoxdriver().setup();
			driver = new FirefoxDriver();
		} else if (browsername.equalsIgnoreCase("edge")) {
			WebDriverManager.edgedriver().setup();
			driver = new EdgeDriver();
		} else if (browsername.equalsIgnoreCase("ie")) {
			WebDriverManager.iedriver().setup();
			driver = new InternetExplorerDriver();
		} else if (browsername.equalsIgnoreCase("safari")) {
			WebDriverManager.safaridriver().setup();
			driver = new SafariDriver();
		}
		driver.manage().window().maximize();
		log.info("Browser Launched");
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(IMPLICIT_WAIT_TIME));
		driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(PAGE_LOAD_TIME));
		driver.get(prop.getProperty("url"));
		log.info("Browser Loaded the URL");

		WebDriverListener listener = new EventHandler();
		driver = new EventFiringDecorator<>(listener).decorate(driver);
		return driver;

	}

	public void navigateToURL(WebDriver driver, Properties prop) {
		try {
			driver.get(prop.getProperty("url"));
		} catch (Exception e) {
			e.printStackTrace();

		}
	}
}

************************----------------------------------------------------------