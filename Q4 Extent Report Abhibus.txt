package Test_Abhibus;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.time.Duration;

import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.events.EventFiringDecorator;
import org.openqa.selenium.support.events.WebDriverListener;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.reporter.ExtentSparkReporter;
import com.aventstack.extentreports.reporter.ExtentReporter;

import utils.EventHandler;
import utils.Reporter;
import utils.Screenshot;

public class Test_abhibus {
  public static WebDriver driver;
  private static ExtentReports report;
  private ExtentTest test;
  Screenshot ss;

  @BeforeClass
  public void report() {
    report = new ExtentReports();
    ExtentSparkReporter spark = new ExtentSparkReporter("/home/coder/project/workspace/Project/Reports/abhibus.html");
    report.attachReporter(spark);

  }

  @BeforeMethod
  public WebDriver beforeMethod() throws MalformedURLException {
    ChromeOptions chromeOptions = new ChromeOptions();
    driver = new RemoteWebDriver(new URL("http://localhost:4444/"), chromeOptions);
    driver.get("https://www.abhibus.com/");
    driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(30));
    WebDriverListener listener = new EventHandler();
    driver = new EventFiringDecorator < > (listener).decorate(driver);
    return driver;

  }

  @Test(priority = 1)
  public void test1() throws InterruptedException, MalformedURLException, IOException {
    test = report.createTest("Test Case 1 ", "Verify error message ");

    driver.findElement(By.xpath("/html/body/header/div/div[2]/div/nav/a[2]")).click();
    Thread.sleep(1000);

    driver.findElement(By.xpath("/html/body/div/div[1]/div/div[1]/a/img")).click();
    Thread.sleep(1000);

    driver.findElement(By.xpath("/html/body/header/div/div[3]/div/nav/a[3]")).click();
    Thread.sleep(1000);

    captureScreenshot("/home/coder/project/workspace/Project/src/Screenshot/test1");

    if (driver.findElement(By.xpath("/html/body/div[2]/div[2]/div/div/div[2]/div/div[1]/div/div/div[1]/h4")).getText().equals("Login to AbhiBus")) {
      System.out.println("Navigation Successful");
      ss.getScreenShot(driver, "TestCase1.png");

    } else {
      System.out.println("Navigation Unsuccessful");
    }

  }
  @Test(priority = 2)
  public void test2() throws InterruptedException, IOException {
    Thread.sleep(3000);
    WebElement from = driver.findElement(By.xpath("/html/body/main/div[1]/div[1]/div[2]/div/div[1]/div/div/div/div/div[2]/input"));
    //from.sendKeys("Mumbai");
    FileInputStream fs = new FileInputStream("/home/coder/project/workspace/Project/testdata/Testdata.xlsx");
    XSSFWorkbook w = new XSSFWorkbook(fs);
    XSSFSheet s = w.getSheetAt(0);
    XSSFRow r = s.getRow(0);
    String fromwhere = r.getCell(0).getStringCellValue();
    from.sendKeys(fromwhere);
    Thread.sleep(1000);

    WebElement to = driver.findElement(By.xpath("/html/body/main/div[1]/div[1]/div[2]/div/div[3]/div/div/div/div/div[2]/input"));
    // to.sendKeys("Pune");
    FileInputStream fss = new FileInputStream("/home/coder/project/workspace/Project/testdata/Testdata.xlsx");
    XSSFWorkbook ws = new XSSFWorkbook(fss);
    XSSFSheet ss = ws.getSheetAt(0);
    XSSFRow rs = ss.getRow(0);
    String towhere = rs.getCell(1).getStringCellValue();
    to.sendKeys(towhere);
    Thread.sleep(3000);

    driver.findElement(By.xpath("/html/body/main/div[1]/div[1]/div[2]/div/div[4]/div/div/div/div[3]/button[1]")).click();
    Thread.sleep(1000);

    driver.findElement(By.xpath("/html/body/main/div[1]/div[1]/div[2]/div/div[5]/button")).click();
    Thread.sleep(1000);
  }
  @Test(priority = 3)
  public void test3() throws InterruptedException, MalformedURLException, IOException {
    JavascriptExecutor js = (JavascriptExecutor) driver;
    js.executeScript("window.scrollBy(0,550)", "");
    Thread.sleep(1000);

    driver.findElement(By.xpath("/html/body/footer/div/div[2]/div/div/div[1]/div/div/div/div/button[5]")).click();
    Thread.sleep(1000);

    driver.findElement(By.xpath("/html/body/footer/div/div[2]/div/div/div[2]/div/div/div/div[7]/a")).click();
    Thread.sleep(1000);

    captureScreenshot("/home/coder/project/workspace/Project/src/Screenshot/test3");

    if (driver.findElement(By.xpath("/html/body/div[4]/div[1]/div[1]/h2")).getText().equals("Media")) {
      System.out.println("Navigation Successful");
    } else {
      System.out.println("Navigation Unsuccessful");
    }
  }

  @AfterMethod
  public void quit() {
    driver.quit();
  }

  private void captureScreenshot(String fileName) throws IOException, NullPointerException {
    TakesScreenshot screenshot = (TakesScreenshot) driver;
    File screenshotFile = screenshot.getScreenshotAs(OutputType.FILE);
    org.apache.commons.io.FileUtils.copyFile(screenshotFile, new File(fileName + ".png"));
    test.log(Status.INFO, "Screenshot captured: " + test.addScreenCaptureFromPath(fileName + ".png"));
  }

}

loggerhandler:

  package utils;

import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;

public class LoggerHandler {
  private static boolean isConfigured = false;

  public static Logger getLogger() {
    if (!isConfigured) {
      configureLogger();
      isConfigured = true;
    }
    return Logger.getLogger(LoggerHandler.class);
  }

  private static void configureLogger() {
    String log4jConfigFile = System.getProperty("user.dir") + "/config/log4j.properties";
    PropertyConfigurator.configure(log4jConfigFile);
  }
}

Excel:

  Mumbai Pune